name: Unity Hub Release Automation

on:
  workflow_dispatch:
  schedule:
    - cron: '00 23 * * *'

permissions:
  contents: write

jobs:
  release_unity_hub:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    # 获取最新版本信息
    - name: Fetch Unity Hub metadata
      id: get_metadata
      run: |
        # Windows 版本
        win_info=$(curl -sI "https://public-cdn.cloud.unity3d.com/hub/prod/UnityHubSetup.exe")
        win_filename=$(echo "$win_info" | grep -i "content-disposition" | sed -E 's/.*filename="?([^"]+)"?.*/\1/')
        win_version=$(echo "$win_filename" | sed -E 's/UnityHubSetup-([0-9]+\.[0-9]+\.[0-9]+)\.exe/\1/')
        
        # macOS 版本
        mac_info=$(curl -sI "https://public-cdn.cloud.unity3d.com/hub/prod/UnityHubSetup.dmg")
        mac_filename=$(echo "$mac_info" | grep -i "content-disposition" | sed -E 's/.*filename="?([^"]+)"?.*/\1/')
        mac_version=$(echo "$mac_filename" | sed -E 's/UnityHubSetup-([0-9]+\.[0-9]+\.[0-9]+)\.dmg/\1/')
        
        echo "win_version=$win_version" >> $GITHUB_OUTPUT
        echo "mac_version=$mac_version" >> $GITHUB_OUTPUT
        echo "combined_version=${win_version}_${mac_version}" >> $GITHUB_OUTPUT

    # 检查是否已存在相同版本的 Release
    - name: Check existing release
      id: check_release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        if gh release view "v${{ steps.get_metadata.outputs.combined_version }}" &> /dev/null; then
          echo "skip_release=true" >> $GITHUB_OUTPUT
          echo "::notice::Release v${{ steps.get_metadata.outputs.combined_version }} already exists"
          exit 0
        else
          echo "skip_release=false" >> $GITHUB_OUTPUT
        fi

    # 仅当需要更新时下载文件
    - name: Download Unity Hub installers
      if: steps.check_release.outputs.skip_release == 'false'
      run: |
        curl -o UnityHubSetup.exe "https://public-cdn.cloud.unity3d.com/hub/prod/UnityHubSetup.exe"
        curl -o UnityHubSetup.dmg "https://public-cdn.cloud.unity3d.com/hub/prod/UnityHubSetup.dmg"

        # 计算校验和
        echo "$(md5sum UnityHubSetup.exe)" > checksums.txt
        echo "$(md5sum UnityHubSetup.dmg)" >> checksums.txt
        echo "$(sha256sum UnityHubSetup.exe)" >> checksums.txt
        echo "$(sha256sum UnityHubSetup.dmg)" >> checksums.txt

    # 创建 Release
    - name: Create Release
      if: steps.check_release.outputs.skip_release == 'false'
      uses: softprops/action-gh-release@v2
      with:
        files: |
          UnityHubSetup.exe
          UnityHubSetup.dmg
          checksums.txt
        tag_name: "V${{ steps.get_metadata.outputs.combined_version }}"
        name: "Unity Hub ${{ steps.get_metadata.outputs.win_version }} (Win) / ${{ steps.get_metadata.outputs.mac_version }} (Mac)"
        body: |
          ### Unity Hub v${{ steps.get_metadata.outputs.combined_version }} 发布

          **Windows 版本**: ${{ steps.get_metadata.outputs.win_version }}
          **macOS 版本**: ${{ steps.get_metadata.outputs.mac_version }}

          ### 校验和
          ```
          $(cat checksums.txt)
          ```

          > 发布于 $(date -u +'%Y-%m-%dT%H:%M:%SZ')
